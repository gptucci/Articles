@page "/"
@inject ToDoListLocalRepo toDoListLocalRepo
@inject IJSRuntime jsRuntime

<h1>Lista To Do Item</h1>

@if (ListaToDoItem == null)
{
    <p><em>Loading...</em></p>
}
else
{


    <button class="btn btn-primary" @onclick="NuovoToDoItem">Nuovo ToDo Item</button>
    <br />
    <div>Numero Item: @(ListaToDoItem.Count()) / Item da sincronizzare:  @(NumeroItemDaSincronizzare)</div>
    <table class="table">
        <thead>
            <tr>
                <th>Titolo</th>
                <th>Done</th>
                <th>Ultima Modifica</th>
                <th>Azioni</th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Context="ToDoItem" Items="@ListaToDoItem">

                <tr>
                    <td>@ToDoItem.Titolo</td>
                    <td>@ToDoItem.Done</td>
                    <td>@ToDoItem.DataOraUltimaModifica.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditToDoItem(ToDoItem)">Edita</button>
                        <button class="btn btn-primary" @onclick="() => DeleteToDoItem(ToDoItem)">Cancella</button>
                    </td>
                </tr>

            </Virtualize>
        </tbody>
    </table>
    <EditToDoItem @ref="EditToDoItemDialog" CloseEventCallback="RefreshListaToDoItem"></EditToDoItem>
    <SyncComponent ForceRefreshEventCallback="RefreshListaToDoItem" />

}


@code{
    EditToDoItem EditToDoItemDialog { get; set; }

    List<ToDoItem> ListaToDoItem { get; set; }
    int NumeroItemDaSincronizzare { get; set; }



    protected override async Task OnInitializedAsync()
    {

        await RefreshListaToDoItem();

    }

    void NuovoToDoItem()
    {
        ToDoItem nuovotodoitem = new ToDoItem();
        EditToDoItemDialog.ShowDialog(nuovotodoitem);
    }
    void EditToDoItem(ToDoItem toDoItem)
    {
        EditToDoItemDialog.ShowDialog(toDoItem);
    }
    async Task DeleteToDoItem(ToDoItem toDoItem)
    {
        if (!await jsRuntime.InvokeAsync<bool>("confirm", $"Sei sicuro di voler cancellare l'attività '{toDoItem.Titolo}' ?"))
            return;


        toDoItem.Deleted = true;
        await toDoListLocalRepo.SalvaToDoItem(toDoItem);
        await RefreshListaToDoItem();
    }
    async Task RefreshListaToDoItem()
    {
        ListaToDoItem = await toDoListLocalRepo.GetListaToDoItem();
        NumeroItemDaSincronizzare = await toDoListLocalRepo.GetNumeroItemDaSincronizzare();
        StateHasChanged();

    }



}
